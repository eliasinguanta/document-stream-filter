name: CI/CD Pipeline für Docker Image und Deployment auf EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          set -x  # Debugging aktivieren
          docker build -t ghcr.io/${{ github.repository_owner }}/document-stream-filter:latest .

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}  # Dein GitHub-Username
          password: ${{ secrets.CI_CD_ACCESS_TOKEN }}  # Das GitHub Secret für das Personal Access Token

      - name: Push Docker image to GitHub Container Registry
        run: |
          set -x  # Debugging aktivieren
          docker push ghcr.io/${{ github.repository_owner }}/document-stream-filter:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: install SSH and docker compose
        run: |
          sudo apt-get update
          sudo apt-get install -y ssh docker-compose

      - name: Decode EC2 SSH Private Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | base64 --decode > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Deploy to EC2 instance
        run: |
          # SSH-Verbindung zur EC2-Instanz aufbauen und Docker-Befehle ausführen
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@16.171.172.65 << 'EOF'
            sudo docker pull ghcr.io/${{ github.repository_owner }}/document-stream-filter:latest
            sudo docker stop document-stream-filter || true
            sudo docker rm document-stream-filter || true
            sudo docker run -d --name document-stream-filter -p 80:3000 ghcr.io/${{ github.repository_owner }}/document-stream-filter:latest
          EOF


